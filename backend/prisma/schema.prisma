generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  password  String
  role      Role     @default(SALESPERSON)
  status    Status   @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  surveySubmissions SurveySubmission[]
  zm1_approved_submissions SurveySubmission[] @relation("ZM1Approver")
  zm2_approved_submissions SurveySubmission[] @relation("ZM2Approver")
}

enum Role {
  SUPERADMIN
  SALESPERSON
  ZONAL_MANAGER_1
  ZONAL_MANAGER_2
}

enum Status {
  PENDING
  ACTIVE
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

model Hospital {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  status    Status   @default(PENDING)
  requestedBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Physician {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  status    Status   @default(PENDING)
  requestedBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SurveySubmission {
  id                        Int       @id @default(autoincrement())
  physicianName             String
  speciality                String
  selectedHospitalCodes     Json
  hospitalData              Json
  sourceFunds               Json
  patientDistributionMatrix Json
  additionalInsights        String?   @db.Text
  submittedBy               Int
  user                      User      @relation(fields: [submittedBy], references: [id])
  createdAt                 DateTime  @default(now())
  updatedAt                 DateTime  @updatedAt

  // New fields for approval workflow
  zm1_approval_status       ApprovalStatus @default(PENDING)
  zm2_approval_status       ApprovalStatus @default(PENDING)
  zm1_approver_id           Int?
  zm2_approver_id           Int?
  zm1_approver              User?     @relation("ZM1Approver", fields: [zm1_approver_id], references: [id])
  zm2_approver              User?     @relation("ZM2Approver", fields: [zm2_approver_id], references: [id])
}